TODO .global bei Ausgabe als Netz auflisten.
TODO check for lines that continue - they end in '\' and there is no '#' in the line before that
TODO output should be ordered by index - currently correct, bc order of netsByNameOfTheNet and netsByNameOfTheSourceBlock is the same, since the names are the same

TODO ressourcenoptimierung (mehr std::move, emplace, &-Zugriff, etc. - weniger copy)
TODO zentraler Speicher für ChannelIDs? ids.get(x,y,type)?
TODO Einträge der Pins in Kanälen [reachedBlocks] (bis zu zwei pro Kanal) für jeden Durchlauf des Algorithmus als eigene Struktur, statt Set?
TODO nach nicht value-initialized variablen suchen
TODO chosenChannel.getType() != 0 ersetzen mit Funktion, die anhand des Namens leichter zu verstehen ist,

TODO gleiche Spur weiterverwenden oder anderes Auswahlverfahren? langsamer, weil jedes Mal gesucht werden muss welche Spur frei ist
TODO Vorsortierung der Netze?
TODO vpr schafft ex5p mit 12 Kanälen - mein Programm bisher nicht

Erster Ansatz ist eine Rasterverdrahtung.

Inputs:
   implizit, bzw. vordefiniert:
      keine Cluster
      4-LUT/4-LUT + FF/FF CLBs
   
   .net Datei:
      Pads (Input/Output + Name)
      CLBs (Name und Pinbelegung)
      Netze
      Clock (global)

   .place Datei:
      .net Datei - für einen Check, dass die gleiche Datei verwendet wird
      Array Größe
      Platzierung jeder Komponente (x + y, subblock für Pads)

Informationen für die interne Verarbeitung:
   alle Netze
      Map([index des Netzes] unsigned short, [[input des Netzes] string, [alle Anschlüsse und jeweils ihre Reihenfolge der Verdrahtung] map(string, Stack von Koordinatenpaaren)] net)
   Anzahl der verarbeiteten Netze (index des Netzes, das als nächstes verdrahtet werden soll)
      unsigned short
   belegte Tracks und Belegungsgrad von Kanälen (falls alle Tracks belegt sind, kann der Kanal nicht mehr verwendet werden und falls zwei Kanäle unterschiedlich voll sind und anderweitig für den Algorithmus gleichwertig sind, sollte der Kanal mit mehr Platz gewählt werden)
      Map (Koordinatenpaar, [[belegte Tracks] unsigned char, [tracks als bis zu 16 Bits] unsigned short] Kanal)
   offene Anschlüsse für alle Pads und CLBs
      Map([name] string, [Kanäle, über die die Anschlüsse erreicht werden können] Set von Koordinatenpaaren)
   pro Durchlauf:
      Indizes des Algorithmus (Wellenfront)
         Map([index] unsigned char, Set von Koordinatenpaaren)
      schon behandelte Kanäle
         Set(Koordinatenpaar)
      bisheriges Netz (Startpunkt der neuen Wellenfront, nachdem ein Anschluss erreicht wurde)
         als Teil der Indizes gespeichert - alle Punkte mit Index 0 sind Startpunkt und der neue Anschluss wird auch als 0 eingetragen
         alle Einträge mit Index größer Null werden gelöscht vor dem neuen Durchgang
      noch zu erreichende Anschlüsse
         multimap<>
      Anzahl der bisher erreichten Anschlüsse
         unsigned short
      Reihenfolge der Verdrahtung des Netzes
         wird direkt im Netz gespeichert
         auf den Stack wird vom Anschluss zur Quelle jeder Kanal eingetragen (Richtung des Algorithmus) und bei der Ausgabe am Ende werden die Kanäle von der Quelle zum Anschluss aufgelistet

Outputs:
   Anzahl der Tracks pro Kanal (minimale Breite)
   Anzahl der Netze (mindestens implizit, da alle Netze aufgelistet werden)
   (kritischer Pfad + Laufzeit)
   Verdrahtung jedes Netzes
   Zuordnung der einzelnen Kabelsegmente zu Tracks


Algorithmus:
   Retracing:
      1. Track für den Sink-Kanal festlegen
      2. angrenzende Kanäle mit index - 1 vergleichen - Kanal in gleicher Richtung wählen (falls nicht möglich, den mit niedrigster Belegung)
         a. zuerst in gleicher Richtung (x falls x, y falls y)
         b. falls keiner in gleicher Richtung passt, die anderen
      3. Track für den gefundenen Kanal festlegen
      4. aktuellen Kanal auf den gefundenen Kanal ändern
      5. index--
      6. zurück zu 2.








Mögliche kreative Komponenten:
   - Kanäle, die zwei Anschlüsse auf einmal erreichen, stark bevorzugen
   - Kanäle, die weniger voll sind, bevorzugen